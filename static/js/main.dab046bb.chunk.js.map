{"version":3,"sources":["state/AppContext.tsx","components/CalorieWatcher.tsx","components/AppHeader.tsx","components/StyledComponents/TextInput.tsx","components/StyledComponents/PrimaryButton.tsx","components/ContentDisplay/ContentInputForm.tsx","components/ContentDisplay/ContentItem.tsx","components/ContentDisplay/TableHeader.tsx","components/ContentDisplay/ContentDisplay.tsx","reducers/calorieReducer.ts","reducers/rootReducer.ts","reducers/entryReducer.ts","reducers/targetCalorieReducer.ts","hooks/useAppState.ts","App.tsx","index.tsx"],"names":["AppContext","createContext","undefined","useCalorieDisplayString","props","consumed","target","useState","displayString","setDisplayString","useEffect","day","Date","toLocaleString","weekday","constructDisplayString","CalorieWatcher","Header","styled","header","AppHeader","appState","useContext","className","totalCalories","targetCalories","TextInput","input","PrimaryButton","button","ContentInputForm","dispatch","item","setItem","calories","setCalories","setTargetCalories","onSubmit","e","preventDefault","calorieEntry","id","uuid","time","type","payload","entry","calorieAction","placeholder","value","onChange","currentTarget","inputCalorie","parseInt","Li","li","Span","span","index","Item","label","TimeAdded","Calories","RemoveButton","ContentItem","charAt","toUpperCase","substr","toLowerCase","getHours","getMinutes","onClick","TableHeader","Ul","ul","ContentDisplay","items","length","map","calorieReducer","state","action","rootReducer","filter","entryReducer","targetCalorieReducer","AppSection","section","AppContent","div","App","appContext","initialState","useReducer","useAppState","Provider","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dab046bb.chunk.js","sourcesContent":["import { createContext, Dispatch } from 'react';\nimport { CalorieEntry } from '../types/typedef';\nimport { GlobalAction } from '../actions/Actions';\n\n/**\n * the global AppState\n */\nexport interface IAppState {\n  items: CalorieEntry[];\n  totalCalories: number | undefined;\n  targetCalories: number | undefined;\n}\n\n/**\n * The AppContext. Contains the global state, and a dispatcher function\n */\nexport interface IAppContext {\n  appState: IAppState;\n  dispatch: Dispatch<GlobalAction>;\n}\n\n/* The use of 'as any' here is safe because we pass in a generic type to createContext. This would prompt the linter\nto throw an error when we do not provide an initial value while using the context provider */\nconst AppContext = createContext<IAppContext>(undefined as any);\n\nexport default AppContext;\n","import React, { useEffect, useState } from 'react';\n\ninterface CalorieWatcherProps {\n  consumed?: number;\n  target?: number;\n}\n\n/**\n * A Custom Hook which provides the display string for the {@link CalorieWatcher}\n * @param props: contains the consumed and target calories\n */\nfunction useCalorieDisplayString(props: CalorieWatcherProps) {\n  const { consumed } = props;\n  const { target } = props;\n\n  const [displayString, setDisplayString] = useState('');\n\n  // redraw when the consumed and/or the target calories changes\n  useEffect(() => {\n    setDisplayString(constructDisplayString(consumed, target));\n  }, [consumed, target]);\n  return displayString;\n}\n\n/**\n * Provides a formatted display string\n * @param consumed\n * @param target\n */\nfunction constructDisplayString(consumed?: number, target?: number): string {\n  const day = new Date().toLocaleString('en-us', { weekday: 'long' });\n\n  if (consumed !== undefined && target !== undefined) {\n    return `${day} ${consumed} / ${target} (KCals)`;\n  }\n  if (consumed !== undefined) {\n    return `${day} ${consumed} (KCals)`;\n  }\n  return day;\n}\n\n/**\n * Displays a formatted string with the current day, total consumed and target calories if they are available.\n * @param props: pass in a {@link CalorieWatcherProps} with the total and consumed calories.\n */\nconst CalorieWatcher: React.FC<CalorieWatcherProps> = (props?): JSX.Element => {\n  // get the display string from the custom hook\n  const displayString = useCalorieDisplayString(props);\n\n  return (\n    <span>\n      <label>{displayString}</label>\n    </span>\n  );\n};\n\nexport default CalorieWatcher;\n","import React, { useContext } from 'react';\nimport styled from 'styled-components';\nimport AppContext from '../state/AppContext';\nimport CalorieWatcher from './CalorieWatcher';\n\nconst Header = styled.header`\n  border-radius: 15px;\n  background: rgba(0, 0, 30, 0.7);\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n`;\n\n/**\n * A Header bar which displays the current day, the calories consumed so far and the target if set\n * @constructor\n */\nconst AppHeader: React.FC = (): JSX.Element => {\n  // fetch the global app state\n  const { appState } = useContext(AppContext);\n\n  return (\n    <Header className='App-header'>\n      <div>Calorie Tracker</div>\n      <CalorieWatcher consumed={appState.totalCalories} target={appState.targetCalories} />\n    </Header>\n  );\n};\n\nexport default AppHeader;\n","import styled from 'styled-components';\n\n/**\n * A styled text input\n */\nexport const TextInput = styled.input`\n  background: transparent;\n  border-radius: 3px;\n  border: 2px solid palevioletred;\n  color: black;\n  margin: 0.5em;\n  padding: 0.75em;\n`;\n","import styled from 'styled-components';\n\n/**\n * A styled button to match the app theme\n */\nexport const PrimaryButton = styled.button`\n  background: #4b4c61;\n  border-radius: 5px;\n  border: 2px solid #4b4c61;\n  color: white;\n  margin: 0 1em;\n  padding: 0.25em 1em;\n`;\n","import React, { useContext, useState } from 'react';\nimport { v4 as uuid } from 'uuid';\nimport AppContext from '../../state/AppContext';\nimport { CalorieEntry } from '../../types/typedef';\nimport { IAlterCalorieAction } from '../../actions/Actions';\nimport { TextInput } from '../StyledComponents/TextInput';\nimport { PrimaryButton } from '../StyledComponents/PrimaryButton';\n\n/**\n * The calorie entry input form. Allows the users to add new calorie entries and also to edit the target calories.\n */\nconst ContentInputForm: React.FC = () => {\n  // fetch the dispatcher\n  const { dispatch } = useContext(AppContext);\n\n  // local states to handle the form inputs\n  const [item, setItem] = useState<string | undefined>(undefined);\n  const [calories, setCalories] = useState<number | undefined>(undefined);\n  const [targetCalories, setTargetCalories] = useState<number | undefined>(undefined);\n\n  /**\n   * Form submit handler: dispatches {@link IAddEntryAction} and/or {@link  ICalorieTargetAction}\n   * based on the user input\n   * @param e: the submission event\n   */\n  function handleSubmit(e: React.ChangeEvent<HTMLFormElement>) {\n    e.preventDefault();\n    // if the item and calorie fields were entered dispatch a IAddEntryAction\n    if (calories !== undefined && item !== undefined) {\n      const actionType = 'add-entry';\n      const calorieEntry: CalorieEntry = {\n        id: uuid(),\n        time: new Date(),\n        calories,\n        item,\n      };\n      const addCalorieAction: IAlterCalorieAction = {\n        type: 'add-calorie',\n        payload: calories,\n      };\n      dispatch({\n        type: actionType,\n        payload: {\n          entry: calorieEntry,\n          calorieAction: addCalorieAction,\n        },\n      });\n      // reset input fields to empty\n      setCalories(undefined);\n      setItem(undefined);\n    }\n    // if target calories are entered, dispatch a ICalorieTargetAction\n    if (targetCalories !== undefined) {\n      dispatch({\n        type: 'set-target',\n        payload: targetCalories,\n      });\n      // reset the input field to empty\n      setTargetCalories(undefined);\n    }\n  }\n\n  // handle food entry\n  function itemChangeHandler(e: React.ChangeEvent<HTMLInputElement>) {\n    setItem(e.currentTarget.value);\n  }\n\n  // handle calorie entry: only accepts numbers\n  function calorieChangeHandler(e: React.ChangeEvent<HTMLInputElement>) {\n    const inputCalorie: number = parseInt(e.currentTarget.value);\n    setCalories(inputCalorie);\n  }\n\n  // handles target calories: only accepts numbers\n  function targetCalorieChangeHandler(e: React.ChangeEvent<HTMLInputElement>) {\n    const target: number = parseInt(e.currentTarget.value);\n    setTargetCalories(target);\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <span>\n        <TextInput placeholder='Enter Food Item' value={item || ''} onChange={itemChangeHandler} />\n        <TextInput placeholder='Enter Calories' value={calories ? `${calories}` : ''} onChange={calorieChangeHandler} />\n        <TextInput\n          placeholder='Enter Target (KCals)'\n          value={targetCalories ? `${targetCalories}` : ''}\n          onChange={targetCalorieChangeHandler}\n        />\n      </span>\n      <div>\n        <PrimaryButton>+</PrimaryButton>\n      </div>\n    </form>\n  );\n};\nexport default ContentInputForm;\n","import React, { useContext } from 'react';\nimport styled from 'styled-components';\nimport { CalorieEntry } from '../../types/typedef';\nimport AppContext from '../../state/AppContext';\nimport { PrimaryButton } from '../StyledComponents/PrimaryButton';\n\ninterface Props {\n  value: CalorieEntry;\n  index: number;\n}\n\ninterface SpanProps {\n  index: number;\n}\n\nconst Li = styled.li`\n  list-style-type: none;\n  padding: 2px 2px;\n`;\n\nconst Span = styled.span`\n  background: ${(props: SpanProps) => (props.index % 2 === 0 ? 'rgba(130,130,160,0.3)' : 'rgba(255,255,255,0.3)')};\n  border-radius: 5px;\n  height: 50px;\n  text-align: left;\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n`;\n\nconst Item = styled.label`\n  padding-left: 10px;\n  flex: 3;\n`;\n\nconst TimeAdded = styled.label`\n  flex: 2;\n`;\n\nconst Calories = styled.label`\n  flex: 2;\n`;\n\nconst RemoveButton = styled(PrimaryButton)`\n  flex: 1;\n`;\n\n/**\n * Returns the given text with the first character in Uppercase\n * @param input: string\n */\nfunction toSentenceCase(input: string): string {\n  return input.charAt(0).toUpperCase() + input.substr(1).toLowerCase();\n}\n\n/**\n * Renders a {@link CalorieEntry} item\n * @param props: pass in a {@link Props} with {@link CalorieEntry} and an index\n */\nconst ContentItem: React.FC<Props> = props => {\n  // fetch the dispatcher\n  const { dispatch } = useContext(AppContext);\n\n  /**\n   * handles the remove action by dispatching a {@link IAlterCalorieAction}\n   */\n  function handleClick() {\n    dispatch({\n      type: 'remove-entry',\n      payload: {\n        id: props.value.id,\n        calorieAction: {\n          type: 'subtract-calorie',\n          payload: props.value.calories,\n        },\n      },\n    });\n  }\n\n  return (\n    <Li key={props.value.id}>\n      <Span index={props.index}>\n        <Item>{toSentenceCase(props.value.item)}</Item>\n        <Calories>{props.value.calories}</Calories>\n        <TimeAdded>{`${props.value.time.getHours()}:${props.value.time.getMinutes()}`}</TimeAdded>\n        <RemoveButton onClick={handleClick}>Remove</RemoveButton>\n      </Span>\n    </Li>\n  );\n};\n\nexport default ContentItem;\n","import styled from 'styled-components';\nimport React from 'react';\nimport { PrimaryButton } from '../StyledComponents/PrimaryButton';\n\nconst Li = styled.li`\n  list-style-type: none;\n  padding: 7px 2px;\n`;\n\nconst Span = styled.span`\n  color: white;\n  background: rgba(0, 0, 30, 0.7);\n  border-radius: 10px;\n  height: 40px;\n  text-align: left;\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n`;\n\nconst Item = styled.label`\n  padding-left: 10px;\n  flex: 3;\n`;\n\nconst TimeAdded = styled.label`\n  flex: 2;\n`;\n\nconst Calories = styled.label`\n  flex: 2;\n`;\n\nconst RemoveButton = styled(PrimaryButton)`\n  flex: 1;\n  visibility: hidden;\n`;\n\nconst space = '  ';\n\n/**\n * Displays a table like header for {@link CalorieEntry} data\n * @constructor\n */\nexport const TableHeader: React.FC = () => {\n  return (\n    <Li key={-1}>\n      <Span>\n        <Item>Food</Item>\n        <Calories>Calories</Calories>\n        <TimeAdded>Time</TimeAdded>\n        <RemoveButton>{space}</RemoveButton>\n      </Span>\n    </Li>\n  );\n};\n","import React, { useContext } from 'react';\n// import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport AppContext from '../../state/AppContext';\nimport ContentInputForm from './ContentInputForm';\nimport ContentItem from './ContentItem';\nimport { TableHeader } from './TableHeader';\n// import {PrimaryButton} from \"../StyledComponents/PrimaryButton\";\n\nconst Ul = styled.ul`\n  padding-left: 0;\n`;\n\n/**\n * The main content display area which contains the calorie entries list and also a form to add new entries\n * and set target calories.\n */\nconst ContentDisplay: React.FC = () => {\n  // get the global state\n  const { appState } = useContext(AppContext);\n\n  return (\n    <div>\n      <Ul>\n        {appState.items.length > 0 && <TableHeader />}\n        {appState.items.map((entry, index) => (\n          <ContentItem key={index} value={entry} index={index} />\n        ))}\n      </Ul>\n      <ContentInputForm />\n      {/* <Link to=\"/calculate-target\"> */}\n      {/*    <PrimaryButton>Calculate Target</PrimaryButton> */}\n      {/* </Link> */}\n    </div>\n  );\n};\n\nexport default ContentDisplay;\n","import { IAlterCalorieAction } from '../actions/Actions';\nimport { IAppState } from '../state/AppContext';\n\n/**\n * A reducer witch handles the dispatched {@link IAlterCalorieAction}s and mutates the current {@link IAppState}\n * @param state - the current {@link IAppState}\n * @param action - the dispatched {@link IAlterCalorieAction}\n * @return - the mutated {@link IAppState}\n */\nexport default function calorieReducer(state: IAppState, action: IAlterCalorieAction): IAppState {\n  switch (action.type) {\n    // adds the calories to the total calories\n    case 'add-calorie':\n      return {\n        ...state,\n        totalCalories: state.totalCalories ? state.totalCalories + action.payload : action.payload,\n      };\n    // subtracts the calories from the total calories\n    case 'subtract-calorie':\n      return {\n        ...state,\n        totalCalories: state.totalCalories ? state.totalCalories - action.payload : 0,\n      };\n    // unreachable code\n    default:\n      const _unreachable: never = action.type;\n      return _unreachable;\n  }\n}\n","import { IAppState } from '../state/AppContext';\nimport { EntryAction, GlobalAction, IAlterCalorieAction, ICalorieTargetAction } from '../actions/Actions';\nimport calorieReducer from './calorieReducer';\nimport entryReducer from './entryReducer';\nimport targetCalorieReducer from './targetCalorieReducer';\n\n/**\n * The top level reducer for the entire App which takes in any dispatched action and returns the mutated state\n * @param state - the current {@link IAppState}\n * @param action - the dispatched {@link GlobalAction}\n * @return - the mutated {@link IAppState}\n */\nexport default function rootReducer(state: IAppState, action: GlobalAction): IAppState {\n  const { type } = action;\n  if (type === 'add-calorie' || type === 'subtract-calorie') {\n    return calorieReducer(state, action as IAlterCalorieAction);\n  }\n  if (type === 'add-entry' || type === 'remove-entry') {\n    return entryReducer(state, action as EntryAction);\n  }\n  if (type === 'set-target') {\n    return targetCalorieReducer(state, action as ICalorieTargetAction);\n  }\n  return state;\n}\n","import { IAppState } from '../state/AppContext';\nimport { EntryAction } from '../actions/Actions';\nimport calorieReducer from './calorieReducer';\n\n/**\n * A reducer witch handles the dispatched {@link EntryAction}s and mutates the current {@link IAppState}\n * @param state - the current {@link IAppState}\n * @param action - the dispatched {@link EntryAction}\n * @return - the mutated {@link IAppState}\n */\nexport default function entryReducer(state: IAppState, action: EntryAction): IAppState {\n  switch (action.type) {\n    /**\n     * adds a new {@link CalorieEntry} to the {@link IAppState}\n     */\n    case 'add-entry':\n      state = calorieReducer(state, action.payload.calorieAction);\n      return {\n        ...state,\n        items: [...state.items, action.payload.entry],\n      };\n\n    /**\n     * removes a {@link CalorieEntry} from the {@link IAppState}\n     */\n    case 'remove-entry':\n      state = calorieReducer(state, action.payload.calorieAction);\n      return {\n        ...state,\n        items: state.items.filter(calorieEntry => calorieEntry.id !== action.payload.id),\n      };\n\n    // unreachable\n    default:\n      const _unreachable: never = action;\n      return _unreachable;\n  }\n}\n","import { IAppState } from '../state/AppContext';\nimport { ICalorieTargetAction } from '../actions/Actions';\n\n/**\n * A reducer to set the target calories\n * @param state - the current {@link IAppState}\n * @param action - the dispatched {@link ICalorieTargetAction}\n * @return - the mutated {@link IAppState}\n */\nexport default function targetCalorieReducer(state: IAppState, action: ICalorieTargetAction): IAppState {\n  return {\n    ...state,\n    targetCalories: action.payload,\n  };\n}\n","import { useReducer } from 'react';\nimport { IAppContext, IAppState } from '../state/AppContext';\nimport rootReducer from '../reducers/rootReducer';\n\n/**\n * A custom hook to obtain the current {@link IAppContext}.\n * @param initialState {@link IAppState}.\n * @return the {@link IAppContext}\n */\nexport const useAppState = (initialState: IAppState): IAppContext => {\n  // hook up the state and reducers\n  const [appState, dispatch] = useReducer(rootReducer, initialState);\n\n  return {\n    appState,\n    dispatch,\n  };\n};\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport styled from 'styled-components';\nimport AppHeader from './components/AppHeader';\nimport ContentDisplay from './components/ContentDisplay/ContentDisplay';\nimport AppContext from './state/AppContext';\nimport { useAppState } from './hooks/useAppState';\n// import CalculateTargetDisplay from \"./components/CalorieTargetDisplay/CalculateTargetDiplay\";\n\n/**\n * A flex box witch holds the all the app components\n */\nconst AppSection = styled.section`\n  height: 100vh;\n  display: flex;\n  padding: 0 3%;\n  align-items: center;\n  justify-content: center;\n`;\n\n/**\n * The main display area, shows up as a card with a blurred background\n */\nconst AppContent = styled.div`\n  width: 90vh;\n  border-radius: 1em;\n  padding: 0.5% 0.5%;\n  text-align: center;\n  background: rgba(255, 255, 255, 0.4);\n  backdrop-filter: blur(20px);\n`;\n\n/**\n * The top level App component\n */\nfunction App():JSX.Element {\n  // the initial context\n  const appContext = useAppState({\n    items: [],\n    totalCalories: undefined,\n    targetCalories: undefined,\n  });\n\n  return (\n    <Router>\n      <AppSection className='App'>\n        <AppContext.Provider value={appContext}>\n          <AppContent>\n            <AppHeader />\n            <Switch>\n              <Route exact path='/'>\n                <ContentDisplay />\n              </Route>\n              {/* <Route exact={true} path=\"/calculate-target\"> */}\n              {/*    <CalculateTargetDisplay/> */}\n              {/* </Route> */}\n            </Switch>\n          </AppContent>\n        </AppContext.Provider>\n      </AppSection>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n// react entry point\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}